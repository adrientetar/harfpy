HarfPy is a Python 3 binding for
[HarfBuzz](https://www.freedesktop.org/wiki/Software/HarfBuzz/). It is
meant to be used in conjunction with my Python wrappers for other
major parts of the Linux typography stack:

* [Qahirah](https://github.com/ldo/qahirah) -- my binding for the
  Cairo graphics library
* [python_freetype](https://github.com/ldo/python_freetype) -- my
  binding for FreeType
* [PyBidi](https://github.com/ldo/pybidi) -- my binding for FriBidi

The basic steps in doing a piece of high-quality text rendering on Linux are:

* Make sure all text is encoded in Unicode. (This should go without saying...)
* Use FriBidi to reorder a string of unicode-encoded text from logical
  (reading) order to visual (rendering) order. (This step can be
  skipped in cases where you do not mix text of different directions.)
* Use FreeType to load a suitable font.
* Use HarfBuzz to choose and lay out suitable glyphs for the specified text,
  controlled by appropriate features selected from the specified font.
* Use Cairo to draw the actual glyphs, as laid out by HarfBuzz, with that font.


Installation
============

To install HarfPy on your system, type

    python3 setup.py install

This will install the Python module named “harfbuzz”.


Basic Usage
===========

All functionality comes from the one module:

    import harfbuzz

You will typically also want more direct access to
constants and other definitions within the HARFBUZZ
class:

    from harfbuzz import \
        HARFBUZZ

Or you may want to abbreviate the names, for convenience:

    import harfbuzz as hb
    from harfbuzz import \
        HARFBUZZ as HB

Names in the module omit the “hb_” and "HB_” prefixes. For example,
whereas in C you might write

    hb_shape(font, buffer);

in Python this becomes (with the above import abbreviations):

    hb.shape(font, buffer)

And a constant like HB_TAG_NONE can be accessed (again with the
above import abbreviations) as HB.TAG_NONE.

Operations on specific HarfBuzz objects further lose the prefix parts
of their names associated with those objects, because they become
methods defined within those objects. Thus, instead of, in C,

    buf = hb_buffer_create();

in Python this becomes

    buf = hb.Buffer.create()

and

    hb_buffer_clear_contents(buf);

becomes

    buf.clear_contents()


Hello-HarfBuzz Example
======================

The HarfBuzz docs include [this example](http://behdad.github.io/harfbuzz/hello-harfbuzz.html)
on how to get started. Let’s recreate that using HarfPy.

    import sys
    import qahirah as qah
    import harfbuzz as hb

We will need to load a font with FreeType. To use FreeType, you have
to create a Library instance. But Qahirah already has one, so it’s
simpler to just use that:

    ft = qah.get_ft_lib()

(This also lets you use the same font instances for drawing the text.)
Let’s make up a simple line of bidirectional text:

    text_line = "abc" + "\u0627\u0628\u0629" + "abc"

Create a Buffer:

    buf = hb.Buffer.create()

Put the text into the buffer:

    buf.add_str(text_line, 0, len(text_line))

Let HarfBuzz figure out how to segment the text into direction/script runs:

    buf.guess_segment_properties()

Load a suitable font:

    ft_face = ft.find_face("Scheherazade")

We need to set a font size, otherwise we won’t get any sensible
metrics. A size of 1 will do for measurement purposes:

    ft_face.set_char_size(size = 1, resolution = qah.base_dpi)

HarfBuzz wants us to wrap this in one of its own Font objects:

    hb_font = hb.Font.ft_create(ft_face)

Do the glyph selection and layout, based on the default font features:

    hb.shape(hb_font, buf)

And let’s see what we got:

    sys.stdout.write \
      (
            "buf.glyph_infos = %s\n glyph_positions = %s\n"
        %
            (buf.glyph_infos, buf.glyph_positions)
      )

Lawrence D'Oliveiro <ldo@geek-central.gen.nz>
2016 August 2
